const fontChip8 = new Uint8Array([
    0xF0, 0x90, 0x90, 0x90, 0xF0,	//0
    0x20, 0x60, 0x20, 0x20, 0x70,	//1
    0x60, 0x90, 0x20, 0x40, 0xF0,	//2
    0xF0, 0x10, 0xF0, 0x10, 0xF0,	//3
    0x90, 0x90, 0xF0, 0x10, 0x10,	//4
    0xF0, 0x80, 0x60, 0x10, 0xE0,	//5
    0xF0, 0x80, 0xF0, 0x90, 0xF0,	//6
    0xF0, 0x10, 0x10, 0x10, 0x10,	//7
    0xF0, 0x90, 0xF0, 0x90, 0xF0,	//8
    0xF0, 0x90, 0xF0, 0x10, 0x10,	//9
    0x60, 0x90, 0xF0, 0x90, 0x90,	//A
    0xE0, 0x90, 0xE0, 0x90, 0xE0,	//B
    0x70, 0x80, 0x80, 0x80, 0x70,	//C
    0xE0, 0x90, 0x90, 0x90, 0xE0,	//D
    0xF0, 0x80, 0xF0, 0x80, 0xF0,	//E
    0xF0, 0x80, 0xF0, 0x80, 0x80	//F
]);

export class Memory {
    private RAM: Uint8Array;

    constructor() {
        this.RAM = new Uint8Array(4096);
    }

    getByte(address: number): number {
        return this.RAM[address];
    }

    setByte(address: number, value: number): void {
        this.RAM[address] = value;
    }
    loadFontsInRAM() {
        for (let i = 0; i < fontChip8.length; i++)
            this.RAM[0x050 + i] = fontChip8[i];
    }

    loadROMInRAM(romContent: Buffer) {
        this.loadFontsInRAM();

        for (let i = 0; i < romContent.length; i++) {
            this.RAM[0x200 + i] = romContent[i];
        }
    }

}